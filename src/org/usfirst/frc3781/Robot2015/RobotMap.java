// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3781.Robot2015;
    

import edu.philiprader.frc3781.RobotDrive;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.BuiltInAccelerometer;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Gyro;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveBaseLeftMotors;
    public static SpeedController driveBaseRightMotors;
    public static RobotDrive driveBaseRobotDrive;
    public static Gyro driveBaseMainGyro;
    public static AnalogInput driveBaseMainUltrasonicSensor;
    public static SpeedController toteLiftToteLift;
    public static DigitalInput toteLiftToteBottom;
    public static Compressor toteLiftMainCompressor;
    public static DoubleSolenoid toteLiftToteLevelerPiston;
    public static SpeedController weightLiftWeightLift;
    public static DigitalInput weightLiftWeightBottom;
    public static Relay cameraRingLight;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static BuiltInAccelerometer driveBaseMainAccelerometer;

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveBaseLeftMotors = new Talon(0);
        LiveWindow.addActuator("DriveBase", "Left Motors", (Talon) driveBaseLeftMotors);
        
        driveBaseRightMotors = new Talon(1);
        LiveWindow.addActuator("DriveBase", "Right Motors", (Talon) driveBaseRightMotors);
        
        driveBaseRobotDrive = new RobotDrive(driveBaseLeftMotors, driveBaseRightMotors);
        
        driveBaseRobotDrive.setSafetyEnabled(true);
        driveBaseRobotDrive.setExpiration(0.1);
        driveBaseRobotDrive.setSensitivity(0.5);
        driveBaseRobotDrive.setMaxOutput(1.0);
        driveBaseRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
        driveBaseRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);        

        driveBaseMainGyro = new Gyro(0);
        LiveWindow.addSensor("DriveBase", "Main Gyro", driveBaseMainGyro);
        driveBaseMainGyro.setSensitivity(0.007);
        driveBaseMainUltrasonicSensor = new AnalogInput(1);
        LiveWindow.addSensor("DriveBase", "Main Ultrasonic Sensor", driveBaseMainUltrasonicSensor);
        
        toteLiftToteLift = new Talon(2);
        LiveWindow.addActuator("Tote Lift", "Tote Lift", (Talon) toteLiftToteLift);
        
        toteLiftToteBottom = new DigitalInput(0);
        LiveWindow.addSensor("Tote Lift", "Tote Bottom", toteLiftToteBottom);
        
        toteLiftMainCompressor = new Compressor(0);
        
        
        toteLiftToteLevelerPiston = new DoubleSolenoid(0, 0, 1);      
        LiveWindow.addActuator("Tote Lift", "Tote Leveler Piston", toteLiftToteLevelerPiston);
        
        weightLiftWeightLift = new Talon(3);
        LiveWindow.addActuator("Weight Lift", "Weight Lift", (Talon) weightLiftWeightLift);
        
        weightLiftWeightBottom = new DigitalInput(1);
        LiveWindow.addSensor("Weight Lift", "Weight Bottom", weightLiftWeightBottom);
        
        cameraRingLight = new Relay(0);
        LiveWindow.addActuator("Camera", "Ring Light", cameraRingLight);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        driveBaseMainAccelerometer = new BuiltInAccelerometer();
        LiveWindow.addSensor("DriveBase", "Main Gyro", driveBaseMainAccelerometer);
    }
}
