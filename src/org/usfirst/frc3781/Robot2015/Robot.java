// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3781.Robot2015;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc3781.Robot2015.commands.CmdAutoDoNothing;
import org.usfirst.frc3781.Robot2015.commands.CmdAutoLandfillPickup;
import org.usfirst.frc3781.Robot2015.commands.CmdAutoRobotSetOnly;
import org.usfirst.frc3781.Robot2015.subsystems.Camera;
import org.usfirst.frc3781.Robot2015.subsystems.DriveBase;
import org.usfirst.frc3781.Robot2015.subsystems.ToteLift;
import org.usfirst.frc3781.Robot2015.subsystems.WeightLift;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

	public static Robot instance;
	
    Command autonomousCommand;
    SendableChooser autoChooser;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveBase driveBase;
    public static ToteLift toteLift;
    public static WeightLift weightLift;
    public static Camera camera;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    public Robot()
    {
    	Robot.instance = this;
    }

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    	RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveBase = new DriveBase();
        toteLift = new ToteLift();
        weightLift = new WeightLift();
        camera = new Camera();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands 
        //(which it very likely will), subsystems are not guaranteed to be 
        // constructed yet. Thus, their requires() statements may grab null 
        // pointers. Bad news. Don't move it.
        oi = new OI();
        
        //Make an autonomous chooser
        this.autoChooser = new SendableChooser();
        this.autoChooser.addDefault("Robot Do Nothing", new CmdAutoDoNothing());
        this.autoChooser.addObject("Robot Set Only (default)", new CmdAutoRobotSetOnly());
        this.autoChooser.addObject("Robot \"Landfill Pickup\"", new CmdAutoLandfillPickup());
        SmartDashboard.putData("Autonomous Mode Chooser", autoChooser);
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
    	//Run the selected autonomous command
    	autonomousCommand = (Command) autoChooser.getSelected();
    	autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
        
        this.sendDataToSmartDashboard();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to 
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }
    
    private void sendDataToSmartDashboard()
    {
    	//Accelerometer Values
    	SmartDashboard.putNumber("Accelerometer X", Robot.driveBase.getMainAccelerometer().getX());
    	SmartDashboard.putNumber("Accelerometer Y", Robot.driveBase.getMainAccelerometer().getY());
    	SmartDashboard.putNumber("Accelerometer Z", Robot.driveBase.getMainAccelerometer().getZ());
    	
    	//Ultrasonic Values
    	SmartDashboard.putNumber("Ultrasonic", Robot.driveBase.getUltrasonicReading());
    	SmartDashboard.putNumber("Ultrasonic Voltage", Robot.driveBase.getUltrasonicVoltage());
    	
    	//Lift limit switches
    	SmartDashboard.putBoolean("Tote Lift On Bottom", Robot.toteLift.isToteLiftOnBottom());
    	SmartDashboard.putBoolean("Weight Lift On Bottom", Robot.weightLift.isWeightLiftOnBottom());
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        
        this.sendDataToSmartDashboard();
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}
