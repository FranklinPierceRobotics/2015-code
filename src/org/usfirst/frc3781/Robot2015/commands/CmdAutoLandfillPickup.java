// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3781.Robot2015.commands;

import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc3781.Robot2015.Robot;

/**
 *
 */
public class CmdAutoLandfillPickup extends Command {

	private enum CommandState { DRIVING1, RAISING_TOTE1, DRIVING2, RAISING_TOTE2, FINISHED }
	private CommandState _commandState;
	double Kp = 0.03;
	private Timer _timer;
	
    public CmdAutoLandfillPickup() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveBase);
        requires(Robot.toteLift);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        
        this._timer = new Timer();
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	this._commandState = CommandState.DRIVING1;
    	Robot.driveBase.getMainGyro().reset();
    	this._timer.reset();
    	this._timer.start();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	switch(this._commandState)
    	{
    	case DRIVING1:
    		Robot.driveBase.drive(-0.35, -0.35 * (Robot.driveBase.getMainGyro().getAngle() * Kp));
    		if(this._timer.get() > 3)
    		{
    			Robot.driveBase.drive(0, 0);
    			this._timer.reset();
    			this._timer.start();
    		}
    		break;
		case RAISING_TOTE1:
			Robot.toteLift.toteLiftSet(1);
			if(this._timer.get() > 3)
			{
				Robot.toteLift.toteLiftSet(0);
				this._timer.reset();
				this._timer.start();
			}
			break;
		case DRIVING2:
			Robot.driveBase.drive(-0.2, -0.2 * (Robot.driveBase.getMainGyro().getAngle() * Kp));
    		if(this._timer.get() > 2)
    		{
    			Robot.driveBase.drive(0, 0);
    			this._timer.reset();
    			this._timer.start();
    		}
			break;
		case RAISING_TOTE2:
			Robot.toteLift.toteLiftSet(1);
			if(this._timer.get() > 2.5)
			{
				Robot.toteLift.toteLiftSet(0);
				this._timer.reset();
				this._timer.start();
			}
			break;
		case FINISHED:
		default:
			this.end();
			break;
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return (this._commandState == CommandState.FINISHED);
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.driveBase.drive(0, 0);
		Robot.toteLift.toteLiftSet(0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	this.end();
    }
}
