// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3781.Robot2015.commands;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Joystick.AxisType;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc3781.Robot2015.Robot;

/**
 *
 */


public class  CmdTeleOp extends Command {
	
	public static double tolerance = 0.2;
	
	private boolean _button2Released = false;
	private boolean _cameraLightToggle = false;
	
    public CmdTeleOp() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveBase);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        
        requires(Robot.toteLift);
        requires(Robot.camera);
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	if(Robot.oi.driveStick.getRawButton(1))
    	{
    		Robot.driveBase.disableDriveHelp();
    	}else{
    		Robot.driveBase.enableDriveHelp();
    	}
    	Robot.driveBase.drive(Robot.oi.driveStick);
    	
    	if (Math.abs(Robot.oi.actionStick.getAxis(AxisType.kY)) >= tolerance && !(Robot.oi.actionStick.getAxis(AxisType.kY) > 0 && Robot.toteLift.isToteLiftOnBottom())) //If it's not in the center
    	{
    		double liftSpeed = 1-((Robot.oi.actionStick.getAxis(AxisType.kThrottle)+1)/2);
    		Robot.toteLift.toteLiftSet(Robot.oi.actionStick.getAxis(AxisType.kY)*liftSpeed);
    		//Robot.toteLift.toteLiftSet(Robot.oi.actionStick.getAxis(AxisType.kY));
    	}else{
    		Robot.toteLift.toteLiftSet(0);
    	}
    	
    	if(Robot.oi.driveStick.getRawButton(2))
    	{
    		if(this._button2Released)
    		{
    			if(this._cameraLightToggle)
    			{
    				this._cameraLightToggle = false;
    				Robot.camera.disableRingLight();
    			}else{
    				this._cameraLightToggle = true;
    				Robot.camera.enableRingLight();
    			}
    			
    			this._button2Released = false;
    		}
    	}else{
    		this._button2Released = true;
    	}
    	
    	if(Robot.oi.actionStick.getRawButton(1))
    	{
    		Robot.toteLift.extendToteLevelerPiston();
    	}else if(Robot.oi.actionStick.getRawButton(2))
    	{
    		Robot.toteLift.retractToteLevelerPiston();
    	}else{
    		Robot.toteLift.restToteLevelerPiston();
    	}
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	this.end();
    }
}
